@use 'sass:math';
@use 'sass:map';
@use 'sass:list';

/**
 * Generate font list values
 * generate_font_list(1.6rem, 1.8rem, list, list)};
 * @return list e.g: (1.6rem, 1.8rem, 2.0rem, 2.4rem, 2.88rem)
 */
@function generate_font_list($base-font, $type-scale, $min-sizes-list, $max-sizes-list) {
	$font-list: ();

	// 's' and 'xs' sizes
	$size: $base-font;
	@each $name in $min-sizes-list {
		$size: math.div($size, $type-scale);
		$font-list: append($font-list, $size);
	}

	// 'm' size
	$font-list: append($font-list, $base-font);

	// 'l' and 'xl' sizes
	$size: $base-font;
	@each $name in $max-sizes-list {
		$size: $size * $type-scale;
		$font-list: append($font-list, $size);
	}

	// sort the list
	$font-list: sort_list($font-list);

	@return $font-list;
}

/**
 * Sort list
 * @return sorted list
 */
@function sort_list($list) {
	// From: https://www.tutorialspoint.com/sorting-function-in-sass
	$len: length($list);
	$sorted: false;
	@while not $sorted {
		$sorted: true;
		@for $i from 1 to ($len - 1) {
			$j: $i + 1;
			@if nth($list, $i) > nth($list, $j) {
				$temp: nth($list, $i);
				$list: set-nth($list, $i, nth($list, $j));
				$list: set-nth($list, $j, $temp);
				$sorted: false;
			}
		}
		$len: $len - 1;
	}
	@return $list;
}

/**
 * Function for fluid typography
 * #{fluid(1rem, 3rem, 32rem, 114rem)};
 */
@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {
	$slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);

	$slope-to-unit: $slope * 100;

	$intercept: $min-size - $slope * $min-breakpoint;

	@return clamp(#{$min-size}, calc(#{$slope-to-unit}#{$unit} + #{$intercept}), #{$max-size});
}

/**
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
		content: ' ';
		display: table;
	}

	&:after {
		clear: both;
	}
}

/**
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */
@mixin fontface($font-family, $font-url, $font-name) {
	@font-face {
		font: {
			family: $font-family;
			style: normal;
			weight: normal;
		}

		src: url($font-url + '/' + $font-name + '.eot');
		src:
			url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			url($font-url + '/' + $font-name + '.woff') format('woff'),
			url($font-url + '/' + $font-name + '.ttf') format('truetype'),
			url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
}

/**
 * IMAGE RETINA
 * @include image-2x(/img/image.png, 100%, auto);
 */
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}

/**
 * MIXIN: Responsive Media Queries
 * USAGE:
	@include r(240)  {}
	@include r(320)  {}
	@include r(480)  {}
	@include r(768)  {}
	@include r(1024) {}
	@include r(1140) {}
	@include r(1280) {}
*/
@mixin rmax($point) {
	@media (max-width: #{$point}px) {
		@content;
	}
}

@mixin rmin($point) {
	@media (min-width: #{$point}px) {
		@content;
	}
}

@mixin rmq($point) {
	@media (max-width: #{$point}px) {
		@content;
	}
}

@mixin r($point) {
	@media (min-width: #{$point}px) {
		@content;
	}
}
